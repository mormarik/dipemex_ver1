document.addEventListener('DOMContentLoaded', () => {
  const root = document.getElementById("cart-root");
  const isLoggedIn = localStorage.getItem("user");

  if (!isLoggedIn) {
    root.innerHTML = '<p class="message">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É</p>';
    return;
  }

  const cart = JSON.parse(localStorage.getItem("cart")) || [];
  window.products = {}; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

  if (cart.length === 0) {
    root.innerHTML = '<p class="empty-cart">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>';
    return;
  }

  Promise.all(cart.map(id => fetch(`/api/products/${id}`).then(res => res.json())))
    .then(productsData => {
      // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      cart.forEach(id => {
        if (!window.products[id]) {
          window.products[id] = { count: 0 };
        }
        window.products[id].count++;
      });

      // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
      productsData.forEach(product => {
        if (window.products[product._id]) {
          window.products[product._id] = {
            ...window.products[product._id],
            ...product
          };
        }
      });

      renderCart(Object.values(window.products));
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', err);
      root.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ API</p>';
    });
});

function renderCart(items) {
  let total = 0;
  let html = `<div class="cart-container">`;

  items.forEach(item => {
    const subtotal = item.price * item.count;
    total += subtotal;

    html += `
      <div class="cart-item" data-id="${item._id}">
        <img src="${item.image}" alt="${item.name}" />
        <div class="cart-info">
          <h3>${item.name}</h3>
          <p>${item.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}</p>
        </div>
        <div class="cart-controls">
          <button onclick="updateQuantity('${item._id}', -1)">-</button>
          <span>${item.count}</span>
          <button onclick="updateQuantity('${item._id}', 1)">+</button>
        </div>
        <div class="cart-price">${subtotal} ‚ÇΩ</div>
      </div>
    `;
  });

  html += `
    <div class="cart-total">–ò—Ç–æ–≥–æ: ${total} ‚ÇΩ</div>
    <button class="checkout-btn" onclick="proceedToCheckout()">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é</button>
  </div>`;

  document.getElementById("cart-root").innerHTML = html;
}

// === –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ ===
window.updateQuantity = function (id, delta) {
  let cart = JSON.parse(localStorage.getItem("cart")) || [];

  if (delta === -1) {
    const index = cart.indexOf(id);
    if (index > -1) cart.splice(index, 1);
  } else {
    cart.push(id);
  }

  localStorage.setItem("cart", JSON.stringify(cart));
  location.reload();
};

// === –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ === //
window.proceedToCheckout = function () {
  const cart = JSON.parse(localStorage.getItem('cart')) || [];

  if (cart.length === 0) {
    alert("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä—ã –¥–ª—è checkout
  localStorage.setItem('checkout-cart', JSON.stringify({ items: cart }));

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  window.location.href = 'checkout.html';

  const cartItems = Object.values(window.products).map(item => ({
    productId: item._id,
    name: item.name,
    price: item.price,
    quantity: item.count,
    image: item.image
  }));

  const user = JSON.parse(localStorage.getItem('user'));
  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  if (!user) {
    alert('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
    return;
  }

  const newOrder = new Order({
    userId: user._id,
    items: cartItems,
    total,
    deliveryMethod: '–ö—É—Ä—å–µ—Ä–æ–º',
    paymentMethod: '–û–Ω–ª–∞–π–Ω',
    status: '–°–æ–±—Ä–∞–Ω'
  });

  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞:
  localStorage.setItem(`orders-${user.email}`, JSON.stringify([{
    orderId: `order-${Date.now()}`,
    items: cartItems,
    total,
    deliveryMethod: '–ö—É—Ä—å–µ—Ä–æ–º',
    paymentMethod: '–û–Ω–ª–∞–π–Ω',
    status: '–°–æ–±—Ä–∞–Ω',
    date: new Date().toLocaleDateString()
  }]));

  window.location.href = 'order-success.html';
};